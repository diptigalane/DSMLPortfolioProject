# -*- coding: utf-8 -*-
"""DSML Uber data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nc-njXwqZ2UKPCC6WXRPq8W5_t_k4DpY
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import math as math
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, Lasso, Ridge, LogisticRegression, SGDRegressor
from sklearn.preprocessing import StandardScaler, MinMaxScaler, PolynomialFeatures
from sklearn.pipeline import make_pipeline
import seaborn as sns
from sklearn.metrics import accuracy_score, classification_report
from requests import get

#!wget https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2014-01.parquet -O yellow_tripdata_2014-01.parquet
url = "https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2014-01.parquet"
parquet_file01 = "yellow_tripdata_2014-01.parquet"
with open(parquet_file01, "wb") as file:
  response = get(url)
  file.write(response.content)

#!wget https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2014-02.parquet -O yellow_tripdata_2014-02.parquet
url = "https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2014-02.parquet"
parquet_file02 = "yellow_tripdata_2014-02.parquet"
with open(parquet_file02, "wb") as file:
  response = get(url)
  file.write(response.content)

df_jan_yellow_taxi = pd.read_parquet(parquet_file01, engine='pyarrow')

df_jan_yellow_taxi.head()

df_jan_yellow_taxi.info()

df_jan_yellow_taxi.describe()

df_jan_yellow_taxi.isna().sum()

df_jan_yellow_taxi.duplicated().value_counts()

df_jan_yellow_taxi.drop_duplicates(inplace=True)

df_jan_yellow_taxi = df_jan_yellow_taxi[df_jan_yellow_taxi['trip_distance'] > 0]

df_jan_yellow_taxi['Date'] = df_jan_yellow_taxi['tpep_pickup_datetime'].dt.date
df_jan_yellow_taxi['Hour'] = df_jan_yellow_taxi['tpep_pickup_datetime'].dt.hour
df_jan_yellow_taxi['Minute'] = df_jan_yellow_taxi['tpep_pickup_datetime'].dt.minute
df_jan_yellow_taxi['DayName'] = df_jan_yellow_taxi['tpep_pickup_datetime'].dt.day_name()
df_jan_yellow_taxi['Day'] = df_jan_yellow_taxi['tpep_pickup_datetime'].dt.day
df_jan_yellow_taxi['Month'] = df_jan_yellow_taxi['tpep_pickup_datetime'].dt.month
df_jan_yellow_taxi['Date'] = pd.to_datetime(df_jan_yellow_taxi['Date'])

def minute_bucket(mm):
  if mm >= 0 and mm <= 10:
    return 1
  elif mm >= 11 and mm <= 20:
    return 2
  elif mm >= 21 and mm <= 30:
    return 3
  elif mm >= 31 and mm <= 40:
    return 4
  elif mm >= 41 and mm <= 50:
    return 5
  elif mm >= 51 and mm <= 60:
    return 6

df_jan_yellow_taxi['minute_bucket'] = df_jan_yellow_taxi['Minute'].apply(minute_bucket)

df_jan_yellow_taxi.head(3)

# Morning - 0, Afternoon - 1, Evening - 2, Midnight - 3
def hour_to_daytime(Hour):
    if Hour>= 5 and Hour< 11:
        return 0
    elif Hour>= 11 and Hour< 17:
        return 1
    elif Hour>= 17 and Hour< 23:
        return 2
    else:
        return 3
df_jan_yellow_taxi['Daytime']= df_jan_yellow_taxi['Hour'].apply(hour_to_daytime)

# Holidays from 2014
jan_holiday_list = [1, 20] # new year, Martin Luther King day
feb_holiday_list = [12, 17] # Lincoln's birthday, Washington's birthday

def holiday_func(x):
  if x['Month'] == 1:
    listt = jan_holiday_list
  elif x['Month'] == 2:
    listt = feb_holiday_list
  if x['Day'] in listt or x['DayName'] == 'Sunday':
    return 1
  else:
    return 0
df_jan_yellow_taxi['holiday'] = df_jan_yellow_taxi[['Month','Day','DayName']].apply(holiday_func, axis=1)

data = df_jan_yellow_taxi.groupby(['PULocationID', 'Date', 'Hour', 'minute_bucket', 'Daytime', 'holiday'])['tpep_pickup_datetime'].count().reset_index()
data.rename(columns={'tpep_pickup_datetime':'number_of_taxis'}, inplace=True)
data.head(3)

data['sdate'] = (data['Date'] - pd.Timestamp("2014-01-01")) / np.timedelta64(1, 'D')

data['hour_minute'] = 6 * data['Hour'] + data['minute_bucket']
data.head(3)

datacopy = data.copy()
datacopy = datacopy.sort_values(['PULocationID', 'sdate', 'hour_minute']).reset_index(drop=True)
n = datacopy.shape[0]
temp_df = datacopy.values
temp = [[0,0,0,0,0],[1,0,0,0,0],[1,1,0,0,0],[1,1,1,0,0],[1,1,1,1,0]]
for i in range(5,n):
    temp.append([temp_df[i-1][6],temp_df[i-2][6],temp_df[i-3][6],temp_df[i-4][6],temp_df[i-5][6]])
tdf = pd.DataFrame(temp, columns=['c1','c2','c3','c4','c5'])
datacopy = pd.concat([tdf, datacopy], axis=1)

datacopy.tail(10)

jan_data = datacopy[['PULocationID', 'sdate', 'hour_minute', 'Daytime', 'holiday', 'c1',	'c2',	'c3',	'c4',	'c5', 'number_of_taxis']]
jan_data.info()

jan_data.shape

jan_data.head()

jan_data.to_csv('uber_jdata.csv', index=False)

"""**Feb data**"""

df_feb_yellow_taxi = pd.read_parquet(parquet_file02, engine='pyarrow')

df_feb_yellow_taxi = df_feb_yellow_taxi[df_feb_yellow_taxi['trip_distance'] > 0]

df_feb_yellow_taxi['Date'] = df_feb_yellow_taxi['tpep_pickup_datetime'].dt.date
df_feb_yellow_taxi['Hour'] = df_feb_yellow_taxi['tpep_pickup_datetime'].dt.hour
df_feb_yellow_taxi['Minute'] = df_feb_yellow_taxi['tpep_pickup_datetime'].dt.minute
df_feb_yellow_taxi['DayName'] = df_feb_yellow_taxi['tpep_pickup_datetime'].dt.day_name()
df_feb_yellow_taxi['Day'] = df_feb_yellow_taxi['tpep_pickup_datetime'].dt.day
df_feb_yellow_taxi['Month'] = df_feb_yellow_taxi['tpep_pickup_datetime'].dt.month
df_feb_yellow_taxi['Date'] = pd.to_datetime(df_feb_yellow_taxi['Date'])

df_feb_yellow_taxi['minute_bucket'] = df_feb_yellow_taxi['Minute'].apply(minute_bucket)

df_feb_yellow_taxi['Daytime']= df_feb_yellow_taxi['Hour'].apply(hour_to_daytime)

df_feb_yellow_taxi['holiday'] = df_feb_yellow_taxi[['Month','Day','DayName']].apply(holiday_func, axis=1)

fdata = df_feb_yellow_taxi.groupby(['PULocationID', 'Date', 'Hour', 'minute_bucket', 'Daytime', 'holiday'])['tpep_pickup_datetime'].count().reset_index()
fdata.rename(columns={'tpep_pickup_datetime':'number_of_taxis'}, inplace=True)

fdata['sdate'] = (fdata['Date'] - pd.Timestamp("2014-01-01")) / np.timedelta64(1, 'D')

fdata['hour_minute'] = 6 * fdata['Hour'] + fdata['minute_bucket']

fdatacopy = fdata.copy()
fdatacopy = fdatacopy.sort_values(['PULocationID', 'sdate', 'hour_minute']).reset_index(drop=True)
n1 = fdatacopy.shape[0]
temp_df = fdatacopy.values
temp = [[0,0,0,0,0],[1,0,0,0,0],[1,1,0,0,0],[1,1,1,0,0],[1,1,1,1,0]]
for i in range(5,n1):
    temp.append([temp_df[i-1][6],temp_df[i-2][6],temp_df[i-3][6],temp_df[i-4][6],temp_df[i-5][6]])
tdf = pd.DataFrame(temp, columns=['c1','c2','c3','c4','c5'])
fdatacopy = pd.concat([tdf, fdatacopy], axis=1)

feb_data = fdatacopy[['PULocationID', 'sdate', 'hour_minute', 'Daytime', 'holiday', 'c1',	'c2',	'c3',	'c4',	'c5', 'number_of_taxis']]
feb_data.to_csv('uber_fdata.csv', index=False)

feb_data.shape

feb_data.head()

